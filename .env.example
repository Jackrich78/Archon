# =====================================================
# DATABASE CONFIGURATION
# =====================================================
# Choose ONE of the following options:

# ─────────────────────────────────────────────────────
# OPTION 1: Cloud Supabase (Managed Service)
# ─────────────────────────────────────────────────────
# Get credentials from: https://supabase.com/dashboard/project/<your-project-id>/settings/api
#
# SUPABASE_URL: Get from Data API section
SUPABASE_URL=

# ⚠️ CRITICAL: You MUST use the SERVICE ROLE key, NOT the Anon key! ⚠️
#
# COMMON MISTAKE: Using the anon (public) key will cause ALL saves to fail with "permission denied"!
#
# How to get the CORRECT key:
# 1. Go to: https://supabase.com/dashboard/project/<your project ID>/settings/api
# 2. In the Settings menu, click on "API keys"
# 3. Find "Project API keys" section
# 4. You will see TWO keys - choose carefully:
#    ❌ anon (public): WRONG - This is shorter, starts with "eyJhbGc..." and contains "anon" in the JWT
#    ✅ service_role (secret): CORRECT - This is longer and contains "service_role" in the JWT
#
# The service_role key is typically much longer than the anon key.
# If you see errors like "Failed to save" or "Permission denied", you're using the wrong key!
#
# On the Supabase dashboard, it's labeled as "service_role" under "Project API keys"
SUPABASE_SERVICE_KEY=

# ─────────────────────────────────────────────────────
# OPTION 2: Local PostgreSQL + PostgREST (Self-Hosted)
# ─────────────────────────────────────────────────────
# For local database setup, use these values instead:
#
# SUPABASE_URL=http://archon-postgrest:3000
# SUPABASE_SERVICE_KEY=<JWT token from migration/generated_secrets.env.template>
# POSTGRES_PASSWORD=<password from migration/generated_secrets.env.template>
# JWT_SECRET=<secret from migration/generated_secrets.env.template>
#
# Setup instructions:
# 1. Generate credentials: See migration/generated_secrets.env.template (created by setup)
# 2. Start local database: docker compose --profile localdb up -d
# 3. Import data (if migrating): See migration/EXPORT_INSTRUCTIONS.md and IMPORT_INSTRUCTIONS.md
# 4. Test setup: See migration/TESTING_LOCAL.md
#
# All other settings (API keys, model choices, RAG flags) are managed via the Settings page

# Optional: Set log level for debugging
LOGFIRE_TOKEN=
LOG_LEVEL=INFO

# Service Ports Configuration
# These ports are used for external access to the services
HOST=localhost
ARCHON_SERVER_PORT=8181
ARCHON_MCP_PORT=8051
ARCHON_AGENTS_PORT=8052
ARCHON_UI_PORT=3737
ARCHON_DOCS_PORT=3838

# Frontend Configuration
# VITE_ALLOWED_HOSTS: Comma-separated list of additional hosts allowed for Vite dev server
# Example: VITE_ALLOWED_HOSTS=192.168.1.100,myhost.local,example.com
# If not set, defaults to localhost, 127.0.0.1, ::1, and the HOST value above
VITE_ALLOWED_HOSTS=

# Development Tools
# VITE_SHOW_DEVTOOLS: Show TanStack Query DevTools (for developers only)
# Set to "true" to enable the DevTools panel in bottom right corner
# Defaults to "false" for end users
VITE_SHOW_DEVTOOLS=false

# When enabled, PROD mode will proxy ARCHON_SERVER_PORT through ARCHON_UI_PORT. This exposes both the 
# Archon UI and API through a single port. This is useful when deploying Archon behind a reverse 
# proxy where you want to expose the frontend on a single external domain.
PROD=false


# NOTE: All other configuration has been moved to database management!
# Run the credentials_setup.sql file in your Supabase SQL editor to set up the credentials table.
# Then use the Settings page in the web UI to manage:
# - OPENAI_API_KEY (encrypted)
# - MODEL_CHOICE 
# - TRANSPORT settings
# - RAG strategy flags (USE_CONTEXTUAL_EMBEDDINGS, USE_HYBRID_SEARCH, etc.)
# - Crawler settings:
#   * CRAWL_MAX_CONCURRENT (default: 10) - Max concurrent pages per crawl operation
#   * CRAWL_BATCH_SIZE (default: 50) - URLs processed per batch
#   * MEMORY_THRESHOLD_PERCENT (default: 80) - Memory % before throttling
#   * DISPATCHER_CHECK_INTERVAL (default: 0.5) - Memory check interval in seconds
